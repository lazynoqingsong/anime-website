<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiejinxin.mapper.RankingMapper">
    
    <!-- 获取周榜数据 -->
    <select id="getWeeklyRanking" resultType="java.util.Map">
        SELECT 
            a.id,
            a.title,
            a.cover_image as coverImage,
            COUNT(DISTINCT w.id) as viewCount,
            COUNT(DISTINCT c.id) as commentCount,
            COUNT(DISTINCT f.id) as favoriteCount,
            (COUNT(DISTINCT w.id) * 1.0 + COUNT(DISTINCT c.id) * 0.5 + COUNT(DISTINCT f.id) * 0.3) as heatScore,
            CASE WHEN uw.id IS NOT NULL THEN 1 ELSE 0 END as isWatched
        FROM 
            anime a
        LEFT JOIN 
            watch_history w ON a.id = w.anime_id AND w.watch_time > DATE_SUB(NOW(), INTERVAL 7 DAY)
        LEFT JOIN 
            anime_comments c ON a.id = c.anime_id AND c.created_time > DATE_SUB(NOW(), INTERVAL 7 DAY)
        LEFT JOIN 
            favorite f ON a.id = f.anime_id AND f.created_time > DATE_SUB(NOW(), INTERVAL 7 DAY)
        LEFT JOIN 
            watch_history uw ON a.id = uw.anime_id AND uw.user_id = #{userId}
        GROUP BY 
            a.id, a.title, a.cover_image, isWatched
        HAVING 
            heatScore > 0
        ORDER BY 
            heatScore DESC
        LIMIT 20
    </select>
    
    <!-- 获取月榜数据 -->
    <select id="getMonthlyRanking" resultType="java.util.Map">
        SELECT 
            a.id,
            a.title,
            a.cover_image as coverImage,
            COUNT(DISTINCT w.id) as viewCount,
            COUNT(DISTINCT c.id) as commentCount,
            COUNT(DISTINCT f.id) as favoriteCount,
            (COUNT(DISTINCT w.id) * 1.0 + COUNT(DISTINCT c.id) * 0.5 + COUNT(DISTINCT f.id) * 0.3) as heatScore,
            CASE WHEN uw.id IS NOT NULL THEN 1 ELSE 0 END as isWatched
        FROM 
            anime a
        LEFT JOIN 
            watch_history w ON a.id = w.anime_id AND w.watch_time > DATE_SUB(NOW(), INTERVAL 30 DAY)
        LEFT JOIN 
            anime_comments c ON a.id = c.anime_id AND c.created_time > DATE_SUB(NOW(), INTERVAL 30 DAY)
        LEFT JOIN 
            favorite f ON a.id = f.anime_id AND f.created_time > DATE_SUB(NOW(), INTERVAL 30 DAY)
        LEFT JOIN 
            watch_history uw ON a.id = uw.anime_id AND uw.user_id = #{userId}
        GROUP BY 
            a.id, a.title, a.cover_image, isWatched
        HAVING 
            heatScore > 0
        ORDER BY 
            heatScore DESC
        LIMIT 20
    </select>
    
    <!-- 获取总榜数据 -->
    <select id="getTotalRanking" resultType="java.util.Map">
        SELECT 
            a.id,
            a.title,
            a.cover_image as coverImage,
            COUNT(DISTINCT w.id) as viewCount,
            COUNT(DISTINCT c.id) as commentCount,
            COUNT(DISTINCT f.id) as favoriteCount,
            (COUNT(DISTINCT w.id) * 1.0 + COUNT(DISTINCT c.id) * 0.5 + COUNT(DISTINCT f.id) * 0.3) as heatScore,
            CASE WHEN uw.id IS NOT NULL THEN 1 ELSE 0 END as isWatched
        FROM 
            anime a
        LEFT JOIN 
            watch_history w ON a.id = w.anime_id
        LEFT JOIN 
            anime_comments c ON a.id = c.anime_id
        LEFT JOIN 
            favorite f ON a.id = f.anime_id
        LEFT JOIN 
            watch_history uw ON a.id = uw.anime_id AND uw.user_id = #{userId}
        GROUP BY 
            a.id, a.title, a.cover_image, isWatched
        HAVING 
            heatScore > 0
        ORDER BY 
            heatScore DESC
        LIMIT 20
    </select>
</mapper> 